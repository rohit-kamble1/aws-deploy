name: Python Application CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
 

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: aws-deploy
  
jobs:
  Deploy:
    name: Deploy to EC2 using ECR
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ github.sha }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TAG
      
      - name: Login to docker hub
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull and Deploy from Amazon ECR to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ github.sha }}
          PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
          HOSTNAME: ${{ secrets.AWS_PUBLIC_KEY }}
          USER_NAME: ${{ secrets.USER_NAME }}
     
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }} registry.hub.docker.com
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          echo "aws ecr get-login-password --region eu-north-1 | \
          sudo docker login --username AWS --password-stdin $ECR_REGISTRY" > commands.txt
          echo "sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$TAG" > commands.txt 
          echo "sudo docker stop \$(sudo docker container ls -q) &>> /dev/null" >> commands.txt
          echo "sudo docker run -d -p 8080:80 $ECR_REGISTRY/$ECR_REPOSITORY:$TAG" >> commands.txt
          cat commands.txt | ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} 