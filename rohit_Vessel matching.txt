# -*- coding: utf-8 -*-
"""
Created on Fri Feb  2 14:28:58 2024

@author: U6093234
"""
import pandas as pd
import numpy as np
import getpass
import os
from datetime import timedelta, date, datetime
from name_matching.name_matcher import NameMatcher
# import cx_Oracle
import streamlit as st
import shutil  # remove later
import sys
import cdb_pycomm_lib.cdbflowreader as flows

@st.cache_data(ttl = '8h')
def load_vesChar():
    #vesChar = flows.get_vessel_characteristics()
    os.chdir(r'C:\matlab\data')
    vesChar = pd.read_csv('vesChar.csv')
    return vesChar

vesChar = load_vesChar()


#read csv file
dfFixTemp = pd.read_csv(r'\matlab\data\Shp_Fixtures\Config\fixtureTemplate.csv') 
@st.cache_data(ttl = '8h')
def load_fixtureData():
    laycanFrom = datetime.today() - timedelta(days = 60)  #set laycan date 
    fixData = flows.get_vessel_fixture(laycan_from_date = laycanFrom) #retrive data
    return fixData

fixData = load_fixtureData()

nIMOs = len(fixData.IMO.unique())
ixIMOFrom = list(range(0,nIMOs,200))
ixIMOFrom = np.transpose(ixIMOFrom)
ixIMOTo = ixIMOFrom[1::]
ixIMOTo = np.append(ixIMOTo, nIMOs+1)
nBlocks = len(ixIMOFrom)

@st.cache_data(ttl = '8h')
def vesParam():
    df_vesselParameters = pd.DataFrame()
    for ixB in list(range(0,nBlocks)):
            blockIMOs = fixData.IMO[ixIMOFrom[ixB]:ixIMOTo[ixB]]
            blockIMOs = blockIMOs.astype('int64')
            blockIMOs = blockIMOs.to_list()
            df_oraT = flows.get_vessel_characteristics(imo_list= blockIMOs)
            #df_vesselParameters = df_vesselParameters.append(df_oraT, ignore_index=True)
            df_vesselParameters = pd.concat([df_vesselParameters, df_oraT])
    return df_vesselParameters

df_vesselParameters = vesParam()
        
fixData['IMO'] = fixData['IMO'].astype("int64")
fixData['LOAD_LOCATION_ZONE_CODE'] = fixData['LOAD_LOCATION_ZONE_CODE'].astype("int64")
fixData['DISCH_LOCATION_ZONE_CODE'] = fixData['DISCH_LOCATION_ZONE_CODE'].astype("int64") 

df_vesselParameters_Dwt = df_vesselParameters.loc[:, ['IMO','DWT']]
df = fixData.merge(df_vesselParameters_Dwt, on = 'IMO',how='left')
df = df.drop_duplicates()

def process_fixData(df):
    df = df.rename(columns = {"NVL(UPDATED_ON,TO_DATE('01-JAN-1970','DD-MON-YYYY'))":"UPDATED_ON","NVL(LAYCAN_FROM,TO_DATE('01-JAN-1970','DD-MON-YYYY'))":"LAYCAN_FROM",\
                              "NVL(LAYCAN_TO,TO_DATE('01-JAN-1970','DD-MON-YYYY'))":"LAYCAN_TO","DISCH_LOCATION_ZONE_CODE": "DISCH_PORT_ID","DISCH_LOCATION_ZONE_NAME": "DISCH_PORT_NAME", \
                              "REF_DISCH_AREA_ID": "DISCH_ZONE_ID","DISCH_AREA_ZONE_NAME": "DISCH_ZONE_NAME", \
                              "LOAD_LOCATION_ZONE_CODE": "LOAD_PORT_ID","LOAD_LOCATION_ZONE_NAME": "LOAD_PORT_NAME", \
                              "REF_LOAD_AREA_ID": "LOAD_ZONE_ID","LOAD_AREA_ZONE_NAME": "LOAD_ZONE_NAME", \
                              "IS_PUBLISHED": "PUBLISHED_YN","IMO": "VESSEL_IMO","DWT":"VESSEL_DWT"})

    df = df.reindex(columns = ["DATA_SOURCE", "FIXTURE_TYPE","VOY_TC", "UPDATED_ON", "LAYCAN_FROM", "LAYCAN_TO", "RATE", \
                               "RATE_TYPE", "CLEAN_DIRTY", "BALLAST_BONUS", "VESSEL_NAME", "VESSEL_IMO", "CHARTERER_NAME", \
                               "CARGO_NAME", "CARGO_SIZE", "LOAD_PORT_ID", "LOAD_PORT_NAME", "LOAD_ZONE_ID", "LOAD_ZONE_NAME", \
                               "DISCH_PORT_ID", "DISCH_PORT_NAME", "DISCH_ZONE_ID", "DISCH_ZONE_NAME", "TERMS", "PUBLISHED_YN", \
                               "VESSEL_NAME_FROM_DS","VESSEL_DWT"])

    #Removing fixtures having Published status as 'F' or 'N', Fixture type is dry-bulk, unknown, LNG Fixtures
    df.drop(df.index[df['FIXTURE_TYPE'] != 'TANKER'], inplace = True)
    df.drop(df.index[df['PUBLISHED_YN'] == 'N'], inplace = True)
    df.drop(df.index[df['PUBLISHED_YN'] == 'F'], inplace = True)
    df.drop(df.index[df['CARGO_NAME'] == 'LNG'], inplace = True)
    df['VESSEL_NAME'].fillna('', inplace = True)

    #Removing Fixtures with TANKER/TBN in Vessel Name
    df.drop(df.index[df['VESSEL_NAME'].str.contains(r'TANKER|TBN')], inplace = True)
    
    return df

df = process_fixData(df)

#Identifying Errors with given logic
IMO_Errors = df[df.VESSEL_IMO ==0].reset_index()
IMO_Errors[['VESSEL_IMO']] = np.nan
df_vesChar = vesChar[(vesChar['VESSEL_SUB_TYPE'] == 'Oil Tankers') & (vesChar['STATUS'] == 'IN SERVICE/COMMISSION')].reset_index().drop('index', axis = 1)
df_wrongName = IMO_Errors[['VESSEL_NAME']]
matcher = NameMatcher(number_of_matches=1, legal_suffixes=True, 
                      common_words=False, top_n=10, verbose=True)

# adjust the distance metrics to use
matcher.set_distance_metrics(['bag', 'typo', 'refined_soundex'])

# load the data to which the names should be matched
df_vesName_a = df_vesChar[['VESSEL_NAME']] #fetch only vessel name
matcher.load_and_process_master_data(column='VESSEL_NAME', 
                                      df_matching_data = df_vesName_a, 
                                      transform=True)

match = matcher.match_names(to_be_matched = df_wrongName, column_matching = 'VESSEL_NAME')

#from dataframe match select only 'original_name', 'match_name', 'score' column 
df_matchName = match[['original_name', 'match_name', 'score']]

df_new_matchName = pd.concat([IMO_Errors, df_matchName], axis = 1)
df_new_matchName = df_new_matchName.drop('original_name', axis = 1)
df_new_matchName['match_name'] = df_new_matchName['match_name'].str.upper()

df_new_matchName['ixScore'] = np.where(df_matchName['score']>=60, 1, 0)

def check_vesselDwt(df_new_matchName):
    for i in range(len(df_new_matchName)):
        if df_new_matchName['ixScore'][i] == 1:
            df_matchName = df_vesChar[df_vesChar.VESSEL_NAME == df_new_matchName["match_name"][i]].reset_index().drop('index', axis =1)
            if len(df_matchName) > 0:
                #check the cargo size with vessel DWT
                df_matchName = df_matchName[(df_matchName['DWT']>= df_new_matchName['CARGO_SIZE'][i]) | (df_matchName['DWT']< df_new_matchName['CARGO_SIZE'][i])].reset_index().drop('index', axis = 1)
                #Does not consider if vessel DWT is zero.
                df_matchName = df_matchName[df_matchName['DWT'] != 0]
                #create array of all vessel match name DWT
                volume = np.array(df_matchName['DWT'])
                #compare volume value with cargo size from df_new_matchName dataframe
                volume = volume[np.where(volume > df_new_matchName['CARGO_SIZE'][i])]
                #if there is no any value in volume array, then calculate the cargo size by using 
                #previous fixture record for this vessel.
                if len(volume) == 0 :
                    vesselType = dfFixTemp[dfFixTemp['Vessel Type'] == df_matchName['VESSEL_SUB_SUB_TYPE'][0]].reset_index().drop('index', axis = 1)
                    if len(vesselType) != 0:
                        if df_matchName['DWT'][0] > max(vesselType['Cargo Size 1'][0], vesselType['Cargo Size 2'][0]):
                            df_new_matchName['CARGO_SIZE'][i] = max(vesselType['Cargo Size 1'][0], vesselType['Cargo Size 2'][0])
                        else:
                            df_new_matchName['CARGO_SIZE'][i] = min(vesselType['Cargo Size 1'][0], vesselType['Cargo Size 2'][0])
                    else:
                        pass
                df_matchName = df_matchName.reset_index().drop('index', axis = 1)
                if df_matchName['VESSEL_TYPE'][0] == "Bulkers":
                    df_matchName = df_matchName[(df_matchName['DWT']>= df_new_matchName['CARGO_SIZE'][i])].reset_index().drop('index', axis = 1)
                    df_matchName.sort_values(by=['DWT']).reset_index().drop('index', axis = 1)
                    try:
                        df_new_matchName['VESSEL_IMO'][i] = df_matchName['IMO'][0]
                    except:
                        pass
                if df_matchName['VESSEL_TYPE'][0] == "Tankers":
                    df_matchName = df_matchName[(df_matchName['DWT']>= df_new_matchName['CARGO_SIZE'][i])].reset_index().drop('index', axis = 1)
                    df_matchName.sort_values(by=['DWT']).reset_index().drop('index', axis = 1)
                    try:
                        df_new_matchName['VESSEL_IMO'][i] = df_matchName['IMO'][0]
                    except:
                        pass
            else:
                pass
            
    return df_new_matchName

df_new_matchName = check_vesselDwt(df_new_matchName)

df_new_matchName = df_new_matchName.drop(["score", "ixScore"], axis = 1)
df_input = df_new_matchName[["VESSEL_IMO", "VESSEL_NAME", "match_name"]]

def edit_dataframe(data):    
    edited_df = st.data_editor(data, hide_index = False, use_container_width = True,
                               column_config= {"VESSEL_IMO": st.column_config.NumberColumn(
                                   format = "%d")})
    return edited_df
edited_df = edit_dataframe(df_input)

IMO_Errors[['VESSEL_NAME','VESSEL_IMO']] = edited_df[['VESSEL_NAME', 'VESSEL_IMO']]

if st.button('Send To CDB.', key = '1'):
    os.chdir(r'C:\Users\U6093234\Desktop')
    IMO_Errors.to_csv('IMO Errors.csv')
    
df_synonyms = edited_df.dropna()
df_synonyms = df_synonyms.rename(columns = {'VESSEL NAME' : 'Synonyms'})
df_synonyms = df_synonyms.rename(columns = {'match_name' : 'VESSEL_NAME'})

if st.button('Add To Synonyms File!', key = '2'):
    os.chdir(r'C:\Users\U6093234\Desktop')
    synonymsFile = pd.read_csv('wrongVesselName.csv')
    synonymsFile.to_csv('wrongVesselName.csv', index = False)
    st.write("Name added to synonyms file")



    
    